package lastTest3;

import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Random;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JScrollBar;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;

public class finalServer extends JFrame implements ActionListener {

	ArrayList<MServer> list = new ArrayList<MServer>();
	JTextArea jta;
	JButton jbtn;
	JScrollPane jsp;
	ServerSocket ss;
	PrintWriter pw;
	BufferedReader br;
	Random rnd = new Random();
	int va = rnd.nextInt(40);
	boolean startFlag = true;
	static int playerCount = 0;
	static boolean lastFlag = true;
	
	// player정보를 저장할 ..
	ArrayList<Player> players = new ArrayList<>();
	
	//새로운 DB연동
	AnswerDAO dao = new AnswerDAO();
	ArrayList<AnswerVO> list2 =null;
	static int index = 0;
	static int count = 0;
	static String[] answer=null;

	public finalServer() {
		super("채팅서버 ");
		setDefaultCloseOperation(EXIT_ON_CLOSE);

		jta = new JTextArea();
		jta.setFont(new Font("Gothic", Font.BOLD, 15));

		jsp = new JScrollPane(jta, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,
				JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);

		jbtn = new JButton("종료");

		add(jsp, "Center");
		add(jbtn, "South");
		jbtn.addActionListener(this);

		setBounds(100, 100, 800, 600);
		setVisible(true);

		// 정답 받아오기
		// 문제있는 테이블에 접근해서 answerArr에 담기
		int i = 0;
		
		list2 = dao.Solution(); // 디비 연동해서 답을 가져온다
		Random rnd = new Random();
		answer = new String[list2.size()]; // 디비에 저장되어있는 답의 갯수 크기만큼을의 크기를 가진다.
		for(AnswerVO vo : list2){
			answer[i] = vo.getSol();
			i++;
		}
		
		// 디비에서 불러온 답을 섞어주기
		for (int k = 0; k < answer.length; k++) {
			int rndNum = rnd.nextInt(list2.size());
			String temp = answer[k];
			answer[k] = answer[rndNum];
			answer[rndNum] = temp;
		} 
		
		vchat();
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		System.out.println("종료합니다");
		System.exit(0);

	}

	private void vchat() {
		// 통신을 위한 소켓 생성
		try {
			ss = new ServerSocket(5000);

			while (true) {
				/*if(list.size() >= 5){
					System.out.println("접속자 수 초과했습니다.");
					break;
				}*/
				// 사용자 접속 대기
				Socket client = ss.accept();
				MServer ms = new MServer(client);
				list.add(ms);
				ms.start();
			}

		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			list.remove(this);
		}

	}

	class MServer extends Thread {
		Socket client;
		String ip;
		PrintWriter pw;
		BufferedReader br;
		
		public MServer(Socket client) {
			this.client = client;
			InetAddress inet = client.getInetAddress();
			ip = inet.getHostAddress();

			try {
				br = new BufferedReader(new InputStreamReader(client.getInputStream()));

				pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(client.getOutputStream())));

			} catch (IOException e) {
				e.printStackTrace();
			}

		}

		@Override
		public void run() {
			playerCount++;
			// System.out.println("서버 count : " + playerCount);
			pw.println("[num] " + playerCount);
			if ((playerCount >= 2)) {
				String msg = "[start]";
				broadcast(msg);
			}
			
			// 읽고 쓰는 기능
			String msg = null;

			try {
				
				while (true) {
					
					msg = br.readLine();
					
					String[] arr = msg.split(" ");
					
					if (msg.equals("[started]")) {
						
						lastFlag = true;
						/*broadcast("[rndValue] " + answer[index]);
						index++;
						broadcast(msg); //////// [started]보내줌
						broadcastTurn(ip);*/ 

						///////////////
						if (count > 10) {
							broadcast("[exit]");
						}else{
							broadcast("[rndValue] " + answer[index]);
							index++;
							broadcast(msg); //////// [started]보내줌
							broadcastTurn(ip);
							count++;
						}
						
					} else if (msg.equals("정답입니다!!!!!!!")) {
						lastFlag = true;

						if (count > 10) {
							broadcast("[rndValue] " + answer[index]);
							index++;
							broadcastTurn(ip);
							count++;
							broadcast("[exit]");
						} else {
							broadcast("[rndValue] " + answer[index]);
							index++;
							broadcastTurn(ip);
							count++;
						}
						
					}else if(arr.length>2 && arr[1].equals("입장하셨습니다.")){ // 로그인할 때..
						Player p = new Player();
						broadcast("  ##  [ " + arr[2] + " ] 님이 입장하셨습니다.  ##");
						p.id = arr[2];
						p.score = Integer.parseInt(arr[3]);
						p.lev = Integer.parseInt(arr[4]);
						players.add(p); // 로그인 하면 players ArrayList에 추가된다
						
						// 회원 정보를 모두에게 뿌려주기
						StringBuffer st = new StringBuffer();
						for (int m = 0; m < players.size(); m++) {
							st.setLength(0); // 문자열 지우기
							st.append("[playerInfo] ");
							st.append( m + " ");
							st.append(players.get(m).id + " ");
							st.append(players.get(m).score + " ");
							st.append(players.get(m).lev + " ");
							
							broadcast(st.toString());
						}
					}else if(arr.length>2 && arr[0].equals("[myscore]")){ // 점수 보내주면...//////////////////////////////
						for (int i = 0; i < players.size(); i++) { // 플레이 인원 수만큼만 .. for문 돌기
							// 받은 점수로 점수 바꿔주기
							if(arr[2].equals(players.get(i).id)){
								players.get(i).score = Integer.parseInt(arr[1]);
								players.get(i).lev = players.get(i).score/70 + 1;
							}
						}
						
						// 회원 정보를 모두에게 뿌려주기
						StringBuffer st = new StringBuffer();
						for (int m = 0; m < players.size(); m++) {
							st.setLength(0); // 문자열 지우기
							st.append("[playerInfo] ");
							st.append( m + " ");
							st.append(players.get(m).id + " ");
							st.append(players.get(m).score + " ");
							st.append(players.get(m).lev + " ");
							
							broadcast(st.toString());
						}
						////////////////////////////////////////////////////////////////////////////////////////////////////////
					}else if(arr[0].equals("[timeout]") && lastFlag){
							broadcast("시간이 종료되었습니다.");
							lastFlag = false;
							broadcast("[start]");
							
					}else if(arr[0].equals("[timeout]")) {
						
					}else if(arr[0].equals("[last]")){

						for (int i = 0; i < players.size(); i++) { // 플레이 인원
							// 받은 점수로 점수 바꿔주기
							players.get(i).score = Integer.parseInt(arr[i+1]);
							players.get(i).lev = players.get(i).score/70 + 1;
						}
						CatchDAO dao2 = new CatchDAO();

						for (int i = 0; i < players.size(); i++) {
							CatchVO vo0 = new CatchVO(players.get(i).id, players.get(i).score, players.get(i).lev);
							dao2.update(vo0);
						}
						///////////////
						dao.close();
						dao2.close();
						///////////// 여기
					}else{
						jta.append("[" + ip + "] : " + msg + "\n");

						broadcast(msg);
					}
					// 현재 스크롤 가장 아래로 이동
					JScrollBar sb = jsp.getVerticalScrollBar(); // 스크롤바 수직 담기
					int v = sb.getMaximum();// 스크롤 최대값 구해줌
					sb.setValue(v);// 최대값 넣어줌
				}
			} catch (IOException e) {
				list.remove(this);
			}
		}// run() end

		public void broadcast(String data) {
			// ArrayList 안에 있는 모든 사용자에게 이 내용을 전달
			for (MServer x : list) {
				x.pw.println(data);
				x.pw.flush();
			}

		}

		public void broadcastTurn(String ip) {
			for (int i = 0; i < list.size(); i++) {
				if (list.get(i).ip == ip && i == 0) {
					list.get(i).pw.println("[answer] " + "0 " + "1");// 1번유저 정답
					list.get(i).pw.flush();
				} else if (list.get(i).ip == ip && i == 1) {
					list.get(i).pw.println("[answer] " + "0 " + "2");// 2번유저 정답
					list.get(i).pw.flush();
				} else if (list.get(i).ip == ip && i == 2) {
					list.get(i).pw.println("[answer] " + "0 " + "3");// 3번유저 정답
					list.get(i).pw.flush();
				} else if (list.get(i).ip == ip && i == 3) {
					list.get(i).pw.println("[answer] " + "0 " + "4");// 4번유저 정답
					list.get(i).pw.flush();
				} else {
					list.get(i).pw.println("[answer] " + "1");// 틀림
					list.get(i).pw.flush();
				}
			}
		}


	}// MServer class end

	public static void main(String[] args) {
		new finalServer();
	}
}// ChatServer class end;
